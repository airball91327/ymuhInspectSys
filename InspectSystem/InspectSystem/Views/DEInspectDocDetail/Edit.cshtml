@model InspectSystem.Models.DEquipment.DEInspectDocDetailVModel

<script src="~/Scripts/DEInspect/GetClassContentEdit.js"></script>
<link rel="stylesheet" href="~/Content/MyStyles/MyStyleForClassContent.css" />

<script>
    var urlCheckValue = '@Url.Action("CheckValue", "DEInspectDocDetail")'
    function showmsgSave(data) {
        if (data.success == true) {
            alert("儲存成功!");
            window.location.reload();
        }
        else {
            alert(data.error);
            $.Toast.hideToast();
        }
    }
</script>

@{
    var DocItems = ViewData["itemsOfDocDetail"] as List<InspectSystem.Models.DEquipment.DEInspectDocDetail>;
    var DocFields = ViewData["fieldsOfDocDetail"] as List<InspectSystem.Models.DEquipment.DEInspectDocDetail>;
}

<h3 style="margin-top:0.5em">@ViewBag.ClassName</h3>
<hr />

@using (Ajax.BeginForm("Save", "DEInspectDocDetail", new AjaxOptions
{
    HttpMethod = "POST",
    OnBegin = "$.Toast.showToast({ 'title': '資料儲存中，請稍待...', 'icon': 'loading', 'duration': 0 })",
    OnSuccess = "showmsgSave"
}, new { id = "detailsForm" }))
{
    @Html.AntiForgeryToken()

    var currentItemName = "0";
    int i = 0, j = 0;
    <div class="container col-md-12">
        @foreach (var item in DocItems)
        {
            /* Display the ItemName when ItemName is not the same. */
            if (item.ItemName != currentItemName)
            {
                <div class="row itemRow">
                    <div class="col-md-2 itemName mainCol">
                        @Html.DisplayFor(modelItem => item.ItemName)
                    </div>
                    <div class="col-md-6 mainCol">
                        @foreach (var fieldItem in DocFields)
                        {
                            /* Display all the FieldName belong the current Item. */
                            if (item.ItemId == fieldItem.ItemId)
                            {
                                <div class="col-md clearfix">
                                    <span class="col-xs-3 fieldTitle">
                                        @if (fieldItem.FieldName != null)
                                        {
                                            @Html.DisplayFor(modelItem => fieldItem.FieldName)
                                        }
                                    </span>

                                    @foreach (var docItem in Model.InspectDocDetail)
                                    {
                                        /* Display textbox or checkbox for all fields, except boolean type. */
                                        if (docItem.ItemId == item.ItemId && docItem.FieldId == fieldItem.FieldId &&
                                            fieldItem.DataType != "boolean")
                                        {
                                            @Html.Hidden("InspectDocDetail[" + i + "].DocId", docItem.DocId, new { id = "InspectDocDetail[" + i + "].DocId" })
                                            @Html.Hidden("InspectDocDetail[" + i + "].AreaId", docItem.AreaId, new { id = "InspectDocDetail[" + i + "].AreaId" })
                                            @Html.Hidden("InspectDocDetail[" + i + "].AreaName", docItem.AreaName)
                                            @Html.Hidden("InspectDocDetail[" + i + "].CycleId", docItem.CycleId, new { id = "InspectDocDetail[" + i + "].CycleId" })
                                            @Html.Hidden("InspectDocDetail[" + i + "].CycleName", docItem.CycleName)
                                            @Html.Hidden("InspectDocDetail[" + i + "].ClassId", docItem.ClassId, new { id = "InspectDocDetail[" + i + "].ClassId" })
                                            @Html.Hidden("InspectDocDetail[" + i + "].ClassName", docItem.ClassName)
                                            @Html.Hidden("InspectDocDetail[" + i + "].ClassOrder", docItem.ClassOrder)
                                            @Html.Hidden("InspectDocDetail[" + i + "].ItemId", docItem.ItemId, new { id = "InspectDocDetail[" + i + "].ItemId" })
                                            @Html.Hidden("InspectDocDetail[" + i + "].ItemName", docItem.ItemName)
                                            @Html.Hidden("InspectDocDetail[" + i + "].ItemOrder", docItem.ItemOrder)
                                            @Html.Hidden("InspectDocDetail[" + i + "].FieldId", docItem.FieldId, new { id = "InspectDocDetail[" + i + "].FieldId" })
                                            @Html.Hidden("InspectDocDetail[" + i + "].FieldName", docItem.FieldName)
                                            @Html.Hidden("InspectDocDetail[" + i + "].DataType", docItem.DataType)
                                            @Html.Hidden("InspectDocDetail[" + i + "].UnitOfData", docItem.UnitOfData)
                                            @Html.Hidden("InspectDocDetail[" + i + "].MinValue", docItem.MinValue)
                                            @Html.Hidden("InspectDocDetail[" + i + "].MaxValue", docItem.MaxValue)
                                            @Html.Hidden("InspectDocDetail[" + i + "].IsRequired", docItem.IsRequired)
                                            @Html.Hidden("InspectDocDetail[" + i + "].IsFunctional", docItem.IsFunctional)
                                            @Html.Hidden("InspectDocDetail[" + i + "].DropDownItems", docItem.DropDownItems)

                                            switch (fieldItem.DataType)
                                            {
                                                case "string":
                                                    <span>
                                                        @if (fieldItem.IsRequired == true)
                                                        {
                                                            <span style="color: red">*</span>
                                                        }
                                                        @Html.EditorFor(modelItem => docItem.Value, new { htmlAttributes = new { @Name = "InspectDocDetail[" + i + "].Value", @class = "form-control" } })
                                                        @Html.ValidationMessage("InspectDocDetail[" + i + "].Value", "", new { @class = "text-danger" })
                                                    </span>
                                                    break;

                                                case "float":
                                                    <span class="form-inline">
                                                        @if (fieldItem.IsRequired == true)
                                                        {
                                                            <span style="color: red">*</span>
                                                        }
                                                        @Html.EditorFor(modelItem => docItem.Value, new { htmlAttributes = new { @Name = "InspectDocDetail[" + i + "].Value", @class = "inputValue form-control", id = i, type = "number", step = "0.0001" } })
                                                        @Html.DisplayFor(modelItem => fieldItem.UnitOfData)
                                                        @Html.ValidationMessage("InspectDocDetail[" + i + "].Value", "", new { @class = "text-danger" })
                                                        <br /><span class="@i col-xs-offset-3"></span>
                                                        @*@if (fieldItem.ToShowPastValue() == true)
                                                            {
                                                                <span>昨日數值 : @fieldItem.PastValue()</span>
                                                            }*@
                                                    </span>
                                                    break;

                                                case "checkbox":
                                                    <span style="padding-left: 1em;">
                                                        @if (docItem.Value == "true")
                                                        {
                                                            @Html.CheckBox("InspectDocDetail[" + i + "].Value", true)
                                                        }
                                                        else
                                                        {
                                                            @Html.CheckBox("InspectDocDetail[" + i + "].Value", false)
                                                        }
                                                    </span>
                                                    break;

                                                case "dropdownlist":
                                                    char[] charSpilt = new char[] { ';' };
                                                    string[] dropDownSpilt = docItem.DropDownItems.Split(charSpilt, StringSplitOptions.RemoveEmptyEntries);
                                                    List<SelectListItem> dropDownList = new List<SelectListItem>();
                                                    foreach (var searchItem in dropDownSpilt)
                                                    {
                                                        if (searchItem == docItem.Value)
                                                        {
                                                            dropDownList.Add(new SelectListItem()
                                                            {
                                                                Text = searchItem,
                                                                Value = searchItem,
                                                                Selected = true
                                                            });
                                                        }
                                                        else
                                                        {
                                                            dropDownList.Add(new SelectListItem()
                                                            {
                                                                Text = searchItem,
                                                                Value = searchItem
                                                            });
                                                        }
                                                    }
                                                    <span>
                                                        @Html.DropDownList("InspectDocDetail[" + i + "].Value", (IEnumerable<SelectListItem>)dropDownList, new { @class = "form-control", style = "width: 50%" })
                                                    </span>
                                                    break;

                                                case "description":
                                                    <span>
                                                        @Html.DisplayFor(modelItem => docItem.FieldDescription)
                                                        @Html.Hidden("InspectDocDetail[" + i + "].FieldDescription", docItem.FieldDescription)
                                                    </span>
                                                    break;
                                            }
                                            i++;
                                        }
                                        else if (docItem.ItemId == item.ItemId && docItem.FieldId == fieldItem.FieldId &&
                                                 fieldItem.DataType == "boolean")
                                        {
                                            i++; // Skip an array space to let the boolean type insert later.
                                        }
                                    }
                                </div>
                            }
                        }
                    </div>
                    <div class="col-md-4">
                        @foreach (var fieldItem in DocFields)
                        {
                            /* Display all the FieldName belong the current Item. */
                            if (item.ItemId == fieldItem.ItemId)
                            {

                                foreach (var docItem in Model.InspectDocDetail)
                                {
                                    /* Display textbox or checkbox for all fields. */
                                    if (docItem.ItemId == item.ItemId && docItem.FieldId == fieldItem.FieldId)
                                    {
                                        if (fieldItem.DataType == "boolean")
                                        {
                                            @Html.Hidden("InspectDocDetail[" + j + "].DocId", docItem.DocId, new { id = "InspectDocDetail[" + j + "].DocId" })
                                            @Html.Hidden("InspectDocDetail[" + j + "].AreaId", docItem.AreaId, new { id = "InspectDocDetail[" + j + "].AreaId" })
                                            @Html.Hidden("InspectDocDetail[" + j + "].AreaName", docItem.AreaName)
                                            @Html.Hidden("InspectDocDetail[" + j + "].CycleId", docItem.CycleId, new { id = "InspectDocDetail[" + j + "].CycleId" })
                                            @Html.Hidden("InspectDocDetail[" + j + "].CycleName", docItem.CycleName)
                                            @Html.Hidden("InspectDocDetail[" + j + "].ClassId", docItem.ClassId, new { id = "InspectDocDetail[" + j + "].ClassId" })
                                            @Html.Hidden("InspectDocDetail[" + j + "].ClassName", docItem.ClassName)
                                            @Html.Hidden("InspectDocDetail[" + j + "].ClassOrder", docItem.ClassOrder)
                                            @Html.Hidden("InspectDocDetail[" + j + "].ItemId", docItem.ItemId, new { id = "InspectDocDetail[" + j + "].ItemId" })
                                            @Html.Hidden("InspectDocDetail[" + j + "].ItemName", docItem.ItemName)
                                            @Html.Hidden("InspectDocDetail[" + j + "].ItemOrder", docItem.ItemOrder)
                                            @Html.Hidden("InspectDocDetail[" + j + "].FieldId", docItem.FieldId, new { id = "InspectDocDetail[" + j + "].FieldId" })
                                            @Html.Hidden("InspectDocDetail[" + j + "].FieldName", docItem.FieldName)
                                            @Html.Hidden("InspectDocDetail[" + j + "].DataType", docItem.DataType)
                                            @Html.Hidden("InspectDocDetail[" + j + "].UnitOfData", docItem.UnitOfData)
                                            @Html.Hidden("InspectDocDetail[" + j + "].MinValue", docItem.MinValue)
                                            @Html.Hidden("InspectDocDetail[" + j + "].MaxValue", docItem.MaxValue)
                                            @Html.Hidden("InspectDocDetail[" + j + "].IsRequired", docItem.IsRequired)
                                            @Html.Hidden("InspectDocDetail[" + j + "].DropDownItems", docItem.DropDownItems)
                                            <div class="col radioBtn">
                                                @Html.RadioButtonFor(modelItem => docItem.IsFunctional, "合格", new { @Name = "InspectDocDetail[" + j + "].IsFunctional" })合格
                                                @Html.RadioButtonFor(modelItem => docItem.IsFunctional, "不合格", new { @Name = "InspectDocDetail[" + j + "].IsFunctional" })不合格
                                                @Html.RadioButtonFor(modelItem => docItem.IsFunctional, "已改善", new { @Name = "InspectDocDetail[" + j + "].IsFunctional" })已改善
                                                @Html.RadioButtonFor(modelItem => docItem.IsFunctional, "未開機", new { @Name = "InspectDocDetail[" + j + "].IsFunctional" })未開機
                                                @Html.RadioButtonFor(modelItem => docItem.IsFunctional, "N/A", new { @Name = "InspectDocDetail[" + j + "].IsFunctional" })N/A
                                                @Html.ValidationMessage("InspectDocDetail[" + j + "].IsFunctional", "", new { @class = "text-danger" })
                                            </div>
                                            <div class="col">
                                                @Html.LabelFor(modelItem => docItem.ErrorDescription)
                                                <br />
                                                @Html.TextAreaFor(modelItem => docItem.ErrorDescription, new { @Name = "InspectDocDetail[" + j + "].ErrorDescription", rows = "3", id = "InspectDocDetail[" + j + "].ErrorDescription", @class = "form-control" })
                                            </div>
                                        }
                                        j++;
                                    }
                                }
                            }
                        }
                    </div>
                </div>
                <hr />
            }
            else
            {
                currentItemName = item.ItemName;
            }
            int countFields = DocFields.Count();
            <input type="hidden" id="countFields" value="@countFields" />
        }
        <div class="text-center">
            <input class="btn btn-primary btn-lg" type="submit" value="儲存" id="submitBtn" />
            <input class="btn btn-primary" type="submit" value="儲存" id="submitScrollBtn" />
        </div>
        <hr />
    </div>
}
