@model InspectSystem.Models.InspectDocDetailsViewModels

<script src="~/Scripts/ClassContentOfArea.js"></script>

@{
    ViewBag.Title = "ViewOfUPS";
}

<style>
    input[type="text"] {
        width: 70%;
    }

    th {
        font-weight: bold;
        text-align: center;
    }
    td {
        text-align: center;
    }
</style>

<h3 style="font-weight: bold; padding-left: 10px">@ViewBag.ClassName</h3>
<hr />

@using (Html.BeginForm("TempSave", "InspectDocDetails", FormMethod.Post, new { id = "detailsForm" }))
{
    @Html.AntiForgeryToken()

    var currentItemName = "0";
    int i = 0;
    <div class="container col-md-12">
    <table class="table-bordered" style="table-layout: fixed">
        <tr class="row">
            <th>
                <p>編號(容量)</p>
            </th>
            <th>
                <p>容量%</p>
            </th>
            <th>
                <p>IR</p>
            </th>
            <th>
                <p>IS</p>
            </th>
            <th>
                <p>IT</p>
            </th>
            <th>
                <p>機房溫度</p>
            </th>
            <th>
                <p>是否正常/</p>
                <p>錯誤描述</p>
            </th>
        </tr>
    @foreach (var item in Model.InspectItems)
    {
        /* Display the ItemName when ItemName is not the same. */
        if (item.ItemName != currentItemName)
        {
                <tr class="row">
                    <td>
                        @Html.DisplayFor(modelItem => item.ItemName)
                    </td>
                    @{int countFields = 0;}
                    @foreach (var fieldItem in Model.InspectFields)
                    {
                        /* Display all the FieldName belong the current Item. */
                        if (item.ItemID == fieldItem.ItemID)
                        {
                            foreach (var docItem in Model.InspectDocDetailsTemporary)
                            {
                                /* Display textbox or checkbox for all fields. */
                                if (docItem.ItemID == item.ItemID && docItem.FieldID == fieldItem.FieldID)
                                {
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].DocID", docItem.DocID)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].AreaID", docItem.AreaID, new { id = "InspectDocDetailsTemporary[" + i + "].AreaID" })
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].AreaName", docItem.AreaName)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].ClassID", docItem.ClassID, new { id = "InspectDocDetailsTemporary[" + i + "].ClassID" })
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].ClassName", docItem.ClassName)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].ItemID", docItem.ItemID, new { id = "InspectDocDetailsTemporary[" + i + "].ItemID" })
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].ItemName", docItem.ItemName)
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].FieldID", docItem.FieldID, new { id = "InspectDocDetailsTemporary[" + i + "].FieldID" })
                                    @Html.Hidden("InspectDocDetailsTemporary[" + i + "].FieldName", docItem.FieldName)

                                    countFields = countFields + 1;
                                    switch (fieldItem.DataType)
                                    {
                                        case "string":
                                            <td>
                                                @Html.Hidden("InspectDocDetailsTemporary[" + i + "].IsFunctional", docItem.IsFunctional)
                                                @Html.EditorFor(modelItem => docItem.Value, new { htmlAttributes = new { @Name = "InspectDocDetailsTemporary[" + i + "].Value" } })
                                                @Html.ValidationMessage("InspectDocDetailsTemporary[" + i + "].Value", "", new { @class = "text-danger" })
                                            </td>
                                            break;

                                        case "float":
                                            <td>
                                                @Html.Hidden("InspectDocDetailsTemporary[" + i + "].IsFunctional", docItem.IsFunctional)
                                                @Html.EditorFor(modelItem => docItem.Value, new { htmlAttributes = new { @Name = "InspectDocDetailsTemporary[" + i + "].Value", @class = "inputValue", id = i } })
                                                @Html.DisplayFor(modelItem => fieldItem.UnitOfData)
                                                @Html.ValidationMessage("InspectDocDetailsTemporary[" + i + "].Value", "", new { @class = "text-danger" })
                                                <br /><span class="@i"></span>
                                            </td>
                                            break;

                                        case "null":
                                            @Html.Hidden("InspectDocDetailsTemporary[" + i + "].IsFunctional", docItem.IsFunctional)
                                            <td></td>
                                            break;

                                        case "boolean":
                                            /* If there is no temperature field,jump over a field. */
                                            if (countFields == 5)
                                            {
                                                <td></td>
                                            }
                                            <td >
                                                @Html.RadioButtonFor(modelItem => docItem.IsFunctional, true, new { @Name = "InspectDocDetailsTemporary[" + i + "].IsFunctional" })正常
                                                @Html.RadioButtonFor(modelItem => docItem.IsFunctional, false, new { @Name = "InspectDocDetailsTemporary[" + i + "].IsFunctional" })不正常
                                                @Html.TextAreaFor(modelItem => docItem.ErrorDescription, new { @Name = "InspectDocDetailsTemporary[" + i + "].ErrorDescription", rows = "3" })
                                            </td>
                                            break;
                                    }
                                }
                            }
                            i++;
                        }
                    }
                </tr>
        }
        else
        {
            currentItemName = item.ItemName;
        }
    }
    </table>
    <hr />
    <div class="text-center">
        <input class="btn btn-primary btn-lg" type="submit" value="暫時儲存" id="submitBtn" />
    </div>
    <hr />
    </div>
}
