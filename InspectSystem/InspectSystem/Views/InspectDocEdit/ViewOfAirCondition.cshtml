@model InspectSystem.Models.InspectDocDetailsViewModels

<script src="~/Scripts/ClassContentOfAreaDocEdit.js"></script>

@{
    ViewBag.Title = "ViewOfAirCondition";
    List<InspectSystem.Models.InspectDocDetails> FieldsOfMostItem = ViewBag.FieldsOfMostItem;
}

<style>
    th, td {
        text-align: center;
    }

    .valueTextBox {
        text-align: left;
        padding: 15px;
    }

    .inputTextOfValue {
        width: 45%;
    }

    .inputTextOfError {
        width: 70%;
    }

    table {
        table-layout: fixed;
        word-break: break-all;
    }

    #sendToChecker {
        position: absolute;
        right: 12px;
    }
</style>

<h3 style="font-weight: bold; padding-left: 10px">@ViewBag.ClassName</h3>
<hr />
@using (Html.BeginForm("SaveData", "InspectDocEdit", FormMethod.Post, new { id = "detailsForm" }))
{
    @Html.AntiForgeryToken()

    var currentItemName = "0";
    int i = 0;
    <div class="container col-md-12">
        <table class="table-bordered">
            <tr class="row">
                <th>
                    <p>運轉機號</p>
                </th>
                @{/* Use foreach to display <th> names. */}
                @foreach (var item in FieldsOfMostItem)
                {
                    if (item.FieldName != null)
                    {
                        <th>
                            <p>@item.FieldName</p>
                        </th>
                    }
                }
                <th>
                    <p>是否正常/</p>
                    <p>錯誤描述</p>
                </th>
            </tr>
            @foreach (var item in Model.InspectItems)
            {
                /* Display the ItemName when ItemName is not the same. */
                if (item.ItemName != currentItemName)
                {
                    <tr class="row">
                        <td>
                            @Html.DisplayFor(modelItem => item.ItemName)
                        </td>
                        @{int countFields = 0;}
                        @foreach (var fieldItem in Model.InspectFields)
                        {
                            /* Display all the FieldName belong the current Item. */
                            if (item.ItemID == fieldItem.ItemID)
                            {
                                foreach (var docItem in Model.InspectDocDetails)
                                {
                                    /* Display textbox or checkbox for all fields. */
                                    if (docItem.ItemID == item.ItemID && docItem.FieldID == fieldItem.FieldID)
                                    {
                                        countFields = countFields + 1;
                                        @Html.Hidden("InspectDocDetails[" + i + "].DocID", docItem.DocID)
                                        @Html.Hidden("InspectDocDetails[" + i + "].AreaID", docItem.AreaID, new { id = "InspectDocDetails[" + i + "].AreaID" })
                                        @Html.Hidden("InspectDocDetails[" + i + "].AreaName", docItem.AreaName)
                                        @Html.Hidden("InspectDocDetails[" + i + "].ClassID", docItem.ClassID, new { id = "InspectDocDetails[" + i + "].ClassID" })
                                        @Html.Hidden("InspectDocDetails[" + i + "].ClassName", docItem.ClassName)
                                        @Html.Hidden("InspectDocDetails[" + i + "].ItemID", docItem.ItemID, new { id = "InspectDocDetails[" + i + "].ItemID" })
                                        @Html.Hidden("InspectDocDetails[" + i + "].ItemName", docItem.ItemName)
                                        @Html.Hidden("InspectDocDetails[" + i + "].FieldID", docItem.FieldID, new { id = "InspectDocDetails[" + i + "].FieldID" })
                                        @Html.Hidden("InspectDocDetails[" + i + "].FieldName", docItem.FieldName)

                                        switch (fieldItem.DataType)
                                        {
                                            case "string":
                                                <td class="valueTextBox">
                                                    @Html.EditorFor(modelItem => docItem.Value, new { htmlAttributes = new { @Name = "InspectDocDetails[" + i + "].Value", @class = "inputTextOfValue" } })
                                                    @Html.ValidationMessage("InspectDocDetails[" + i + "].Value", "", new { @class = "text-danger" })
                                                </td>
                                                break;

                                            case "float":
                                                <td class="valueTextBox">
                                                    @Html.EditorFor(modelItem => docItem.Value, new { htmlAttributes = new { @Name = "InspectDocDetails[" + i + "].Value", @class = "inputTextOfValue inputValue", id = i } })
                                                    @Html.DisplayFor(modelItem => fieldItem.UnitOfData)
                                                    @Html.ValidationMessage("InspectDocDetails[" + i + "].Value", "", new { @class = "text-danger" })
                                                    <br /><span class="@i"></span>
                                                </td>
                                                break;

                                            case "null":
                                                <td></td>
                                                break;

                                            case "boolean":

                                                if (countFields == 1)
                                                {
                                                    for (int j = 1; j < FieldsOfMostItem.Count(); j++)
                                                    {
                                                        <td></td>
                                                    }
                                                }
                                                else if (countFields < FieldsOfMostItem.Count())
                                                {
                                                    <td></td>
                                                }
                                                <td>
                                                    @Html.RadioButtonFor(modelItem => docItem.IsFunctional, true, new { @Name = "InspectDocDetails[" + i + "].IsFunctional" })是
                                                    @Html.RadioButtonFor(modelItem => docItem.IsFunctional, false, new { @Name = "InspectDocDetails[" + i + "].IsFunctional" })否
                                                    @Html.ValidationMessage("InspectDocDetails[" + i + "].IsFunctional", "", new { @class = "text-danger" })
                                                    @Html.TextAreaFor(modelItem => docItem.ErrorDescription, new { @Name = "InspectDocDetails[" + i + "].ErrorDescription", rows = "3" })
                                                </td>
                                                break;
                                        }
                                    }
                                }
                                i++;
                            }
                        }
                    </tr>
                }
                else
                {
                    currentItemName = item.ItemName;
                }
            }
        </table>
        <hr />
        <div>
            <input class="btn btn-primary" type="submit" value="儲存修改資料" />
        </div>
        <hr />
    </div>
}


